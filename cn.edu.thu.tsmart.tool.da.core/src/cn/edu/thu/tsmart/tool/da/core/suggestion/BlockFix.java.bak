package cn.edu.thu.tsmart.tool.da.core.suggestion;

import org.eclipse.core.filebuffers.ITextFileBuffer;
import org.eclipse.core.filebuffers.ITextFileBufferManager;
import org.eclipse.core.filebuffers.LocationKind;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IDocument;
import org.eclipse.swt.widgets.Display;
import org.eclipse.text.edits.MalformedTreeException;
import org.eclipse.text.edits.ReplaceEdit;
import org.eclipse.text.edits.TextEdit;
import org.eclipse.text.edits.UndoEdit;

import cn.edu.thu.tsmart.tool.da.core.search.fixSite.StatementFixSite;

public class BlockFix extends Fix{
	private StatementFixSite fixSite;
	private IFile modifiedFile;
	private int startposition;
	private int originalLength;
	
	private String originalString;
	private String modifiedString;
	
	private UndoEdit undoEdit;
	private TextEdit doEdit;
	
	/*ASTNode pre;
	ASTNode post;*/	
	
	
	public BlockFix(StatementFixSite fixSite, int startposition, int originalLength, String modifiedString){
		this.fixSite = fixSite;
		this.modifiedFile = fixSite.getFile();
		this.startposition = startposition;
		this.originalLength = originalLength;		
		this.modifiedString = modifiedString;
	}
	
/*
	public static void doFix(IJavaProject project, BlockFix fix){
		BasicBlock block = fix.block;
		if(block instanceof ActionBlock){
			List<ASTNode> stmts= ((ActionBlock)block).getStatements();
			if(stmts.size() > 0){
				ASTNode node = stmts.get(0).getRoot();
				if(node instanceof CompilationUnit){
					IResource resource = ((CompilationUnit)node).getJavaElement().getResource();
					if(resource instanceof IFile){
						Display.getDefault().syncExec(new Runnable(){
							@Override
							public void run() {
								try {
								IFile file = (IFile)resource;
								IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
								ITextEditor editor = (ITextEditor) IDE.openEditor(page, file);
								IDocument document = editor.getDocumentProvider().getDocument(editor.getEditorInput());
								fix.originalString = document.get(fix.startposition, fix.originalLength);
								document.replace(fix.startposition, fix.originalLength, fix.modifiedString);
								editor.doSave(new NullProgressMonitor());
								} catch (PartInitException | BadLocationException e) {
									e.printStackTrace();
								}
							}
							
						});							
						
					}
				}
			}
		}
		
	}
	
	public static void undoFix(IJavaProject project, BlockFix fix){
		BasicBlock block = fix.block;
		if(block instanceof ActionBlock){
			List<ASTNode> stmts= ((ActionBlock)block).getStatements();
			if(stmts.size() > 0){
				ASTNode node = stmts.get(0).getRoot();
				if(node instanceof CompilationUnit){
					IResource resource = ((CompilationUnit)node).getJavaElement().getResource();
					if(resource instanceof IFile){
						Display.getDefault().syncExec(new Runnable(){
							@Override
							public void run() {
								try {
									IFile file = (IFile)resource;
									IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
									ITextEditor editor = (ITextEditor) IDE.openEditor(page, file);
									IDocument document = editor.getDocumentProvider().getDocument(editor.getEditorInput());
									document.replace(fix.startposition, fix.modifiedString.length(), fix.originalString);
									editor.doSave(new NullProgressMonitor());
								} catch (PartInitException | BadLocationException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}								
							}							
						});
						
					}
				}
		
			}
		}
	}
*/
	@Override
	public String toString(){
		
		//TODO:
		
		/*if(block instanceof ActionBlock){
			List<ASTNode> stmts= ((ActionBlock)block).getStatements();
			if(stmts.size() > 0){
				ASTNode node = stmts.get(0).getRoot();
				if(node instanceof CompilationUnit){
					IResource resource = ((CompilationUnit)node).getJavaElement().getResource();
					int lineNumber = ((CompilationUnit)node).getLineNumber(stmts.get(0).getStartPosition());
					return "Structure Change: " + resource.getName() + " @ line " + lineNumber;
				}
			}
		}*/
		if(this.doEdit != null)
			return this.doEdit.toString();
		return "";
	}


	@Override
	public void doFix() {
		ReplaceEdit replaceEdit = new ReplaceEdit(startposition, originalLength, modifiedString);
		doEdit = replaceEdit;
		ITextFileBuffer fileBuffer = ITextFileBufferManager.DEFAULT.getTextFileBuffer(fixSite.getFile().getFullPath(), LocationKind.IFILE);
		if(fileBuffer == null){
			System.out.println("FileBuffer Not Found: " + fixSite.getFile().getFullPath());
			try {
				ITextFileBufferManager.DEFAULT.connect(fixSite.getFile().getFullPath(), LocationKind.IFILE, new NullProgressMonitor());
				fileBuffer = ITextFileBufferManager.DEFAULT.getTextFileBuffer(fixSite.getFile().getFullPath(), LocationKind.IFILE);
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		IDocument document = fileBuffer.getDocument();
		try {
			Display.getDefault().syncExec(new Runnable(){

				@Override
				public void run() {
					try {
						undoEdit = replaceEdit.apply(document);
					} catch (MalformedTreeException e) {
						// TODO Auto-generated catch block
						System.out.println("malformed tree: "+ replaceEdit.toString());
						e.printStackTrace();
					} catch (BadLocationException e) {
						System.out.println("malformed tree: "+ replaceEdit.toString());
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
				
			});			
			fileBuffer.commit(new NullProgressMonitor(), true);
		} catch (MalformedTreeException e) {
			e.printStackTrace();
		}
		/*Display.getDefault().syncExec(new Runnable(){
			@Override
			public void run() {
				try {
				IFile file = fix.modifiedFile;
				IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
				ITextEditor editor = (ITextEditor) IDE.openEditor(page, file);
				IDocument document = editor.getDocumentProvider().getDocument(editor.getEditorInput());
				fix.originalString = document.get(fix.startposition, fix.originalLength);
				document.replace(fix.startposition, fix.originalLength, fix.modifiedString);
				editor.doSave(new NullProgressMonitor());
				} catch (PartInitException | BadLocationException e) {
					e.printStackTrace();
				}
			}
			
		});*/ catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}


	@Override
	public void undoFix() {
		ITextFileBuffer fileBuffer = ITextFileBufferManager.DEFAULT.getTextFileBuffer(fixSite.getFile().getFullPath(), LocationKind.IFILE);
		IDocument document = fileBuffer.getDocument();
		if(undoEdit == null)
			return;
		else{
			try {
				Display.getDefault().syncExec(new Runnable(){

					@Override
					public void run() {
						try {
							undoEdit.apply(document);
						} catch (MalformedTreeException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (BadLocationException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
					
				});
				fileBuffer.commit(new NullProgressMonitor(), true);
			} catch (MalformedTreeException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		/*Display.getDefault().syncExec(new Runnable(){
			@Override
			public void run() {
				try {
					IFile file = fix.modifiedFile;
					IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
					ITextEditor editor = (ITextEditor) IDE.openEditor(page, file);
					IDocument document = editor.getDocumentProvider().getDocument(editor.getEditorInput());
					document.replace(fix.startposition, fix.modifiedString.length(), fix.originalString);
					editor.doSave(new NullProgressMonitor());
				} catch (PartInitException | BadLocationException e) {
					e.printStackTrace();
				}								
			}							
		});*/
		
	}

	@Override
	public IFile[] getModifiedFiles() {
		IFile[] files = new IFile[] {this.modifiedFile};
		return files;
	}
}
